{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"fors",
				"forseeSurveyObj"
			],
			[
				"pageblo",
				"apex:pageBlockSection"
			],
			[
				"s",
				"strength	(Integer)"
			],
			[
				"page",
				"apex:pageMessage"
			],
			[
				"out",
				"apex:outputText"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/pages/SocialMediaPage.page",
			"settings":
			{
				"buffer_size": 1786,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/********************************************************************************************************\n*    Author :     Accenture\n*    Requirement: Forsee Trigger\n*    Version:     1.0 Aditya - Added custom label to specify time limit for forsee resend.\n*    Version:     1.1 Haemen - Added Custom label to not not sent forsee if Primary component is  \"WIreless\"\n*********************************************************************************************************/\ntrigger SocialForseeTrigger on Case (after update) {\n    if(Social_StreamingUtil.doNtFireEmail2CaseRun && (Boolean.valueOf(Label.Deactivate_Case_Triggers))) {      \n        SocialCareForseeHandler socialCareHandler = null;\n        Set<Id> caseIdSet = null;\n        boolean isRadianFlag = false;\n        Set<String> profileIdsDoNotSendForsee = new Set<String>();//Set to store profile ids specified in custom label.\n        String profileIds = label.NonForseeProfileId ;//String for getting ids from custom label.\n        if(profileIds != Null) {\n            profileIdsDoNotSendForsee.addAll(profileIds.split(';'));\n        }\n        //If flag value is True then execute Trigger\n        //Aditya: Added additional check for not sending the forsee form to general care manager profile users.\n        if(String.Valueof(System.label.Enable_Trigger_SocialForseeTrigger)!=null && String.Valueof(System.label.Enable_Trigger_SocialForseeTrigger).equalsIgnoreCase('True') && !profileIdsDoNotSendForsee.isEmpty() && !profileIdsDoNotSendForsee.Contains(userInfo.getProfileId()) ){\n            if(Trigger.isUpdate) {\n                socialCareHandler = new SocialCareForseeHandler();\n                caseIdSet = new Set<Id>();\n                for(Case caseObj : Trigger.New) {\n                    \n                    // Get Old Case \n                    Case oldCase = Trigger.oldMap.get(caseObj.Id);\n                    \n                    // Check Status\n                    if(oldCase!=null && oldCase.Status!=caseObj.Status && CheckCase(Label.Foresee_Case_Reasons,caseObj.Reason) && CheckCase(Label.Foresee_Case_Status,caseObj.Status)){\n                        caseIdSet.add(caseObj.Id);\n                    }\n\n                     if(!isRadianFlag && (caseObj.LastModifiedById == '005E0000002G4RU')) {\n                        isRadianFlag = true;\n                    }  \n \n                } //end for new\n                \n                if(caseIdSet.size() != 0){\n                system.debug('THISSSS'+caseIdSet.size());\n                // Fetch All Case Ids (Contact Has No Open Cases/No Foresee Past 48 Hours)\n                caseIdSet =     (caseIdSet);\n                system.debug('THISSSS222'+caseIdSet.size());\n                // Call Util Class Method\n                socialCareHandler.generateForSeeUrls(caseIdSet);\n                }                                            \n            }\n         }\n         if(Social_CaseAssignmentUtility.executeTriggerCode && !isRadianFlag && (Boolean.valueOf(Label.ACTIVATE_TIMER_APP)) && String.Valueof(System.label.Enable_Trigger_SocialForseeTrigger)!=null && String.Valueof(System.label.Enable_Trigger_SocialForseeTrigger).equalsIgnoreCase('True')) {\n                TimeTrackHandler.doUpdateTimeTracks(Trigger.New, 'Case Update');\n         } \n    }\n        //A method which handles foresee URL sending at the Contact level\n        private Set<Id> fetchCaseIds(Set<Id> caseIdsSet) {\n            Set<Id> modifiedCaseObjIdSet = new Set<Id>();\n            Set<Id> contactObjIdSet = new Set<Id>();\n            \n            List<Case> caseList = new List<Case>();\n            List<Contact> contactList = new List<Contact>();\n            boolean urlSendFlag = false;\n            Forsee_Survey__c forseeObj = null;\n            List<Contact> modifiedContactList = new List<Contact>();\n            \n            try {\n                System.debug('Hai :'+caseIdsSet);\n                //Block to get the contactId's\n                for(Case caseObj : [Select Id, Contact.Id from Case Where Id In :caseIdsSet]) {\n                    if(null != caseObj.Contact.Id) {\n                        contactObjIdSet.add(caseObj.Contact.Id);\n                    }\n                }\n                \n                //Block to get the associated Cases and their lastest Foresee URL\n                if(!contactObjIdSet.isEmpty()) {\n                    contactList = \n                    [\n                        Select Id, LastName, \n                        (Select Id, CaseNumber, Status from Cases), \n                        (Select Id, Forsee_URL__c,Sent_In_48_Hours__c, URL_Sent_Date__c,CreatedDate \n                        from Forsee_Surveys__r Order by CreatedDate desc Limit 1) \n                        from Contact Where Id In :contactObjIdSet\n                    ];\n                    \n                    //Check for Contact\n                    for(Contact contactObj : contactList) {\n                        urlSendFlag = false;\n    \n                        //Check for foreseeURL\n                        forseeObj = (((contactObj.Forsee_Surveys__r) != null)&&(!contactObj.Forsee_Surveys__r.isEmpty()))? \n                            contactObj.Forsee_Surveys__r.get(0) : null; \n                        \n                        if(null != forseeObj) {\n                            if(forseeObj.CreatedDate.addMinutes(Integer.valueOf(Label.ForseeSurveyTime)) <= DateTime.now()) {\n                                urlSendFlag = true; \n                            } else {\n                                break;\n                            }\n                            System.debug('Url send flag :'+urlSendFlag);\n                        } else {\n                            urlSendFlag = true;\n                        }\n                        \n                        //Check for 'Closed' & 'Auto Closed' cases\n                        if(urlSendFlag) {\n                            for(Case caseObj : contactObj.Cases) {\n                                if(!CheckCase(Label.Foresee_Case_Status,caseObj.Status)) {\n                                    urlSendFlag = false;\n                                    break;\n                                }\n                            }\n                            if(urlSendFlag) {\n                                modifiedContactList.add(contactObj);\n                            }\n                        }\n                    } //End for Contact\n                    for(Contact contactObj : modifiedContactList) {\n                        for(Case caseObj : contactObj.Cases) {\n                            if(caseIdsSet.contains(caseObj.Id)) {\n                                modifiedCaseObjIdSet.add(caseObj.Id);\n                            }\n                        }\n                    }\n                    System.debug('Hello:'+modifiedCaseObjIdSet);\n                }\n            } catch(DMLException dmlExcep) {\n                System.debug('DML Exception Caught :'+dmlExcep.getMessage());\n            } catch(Exception excep) {\n                System.debug('Exception Caught :'+excep.getMessage());\n            }\n            return modifiedCaseObjIdSet;\n        }\n        \n        /*\n        // Method To Check Case Closure Reason For ForeSee Generation\n        private boolean CheckcaseclosureReason(String closeReason){\n            \n            //Split Case Reason Label\n            if(Label.Foresee_Case_Reasons!=null && closeReason!=null){\n                \n                Set<String> caseReasonList = new Set<String>(Label.Foresee_Case_Reasons.split(';'));\n                if(caseReasonList.contains(closeReason.trim())){\n                    return true;\n                }\n            }\n            return false;\n        } */\n\n        // Method To Check Case Status\n        private boolean CheckCase(String labelValue, String str){\n            if(labelValue != null && str != null){\n                Set<String> labelValueList = new Set<String>(labelValue.split(';'));\n                if(labelValueList.contains(str.trim())){\n                    return true;\n                }\n            }\n            return false;\n        }\n    \n}",
			"file": "src/triggers/SocialForseeTrigger.trigger",
			"file_size": 8103,
			"file_write_time": 130977287960000000,
			"settings":
			{
				"buffer_size": 8095,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/classes/SocialCareController.cls",
			"settings":
			{
				"buffer_size": 7537,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/classes/SocialCareABSController.cls",
			"settings":
			{
				"buffer_size": 6641,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/classes/SocialCareForseeHandler.cls",
			"settings":
			{
				"buffer_size": 18022,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 367.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"insta",
				"Package Control: Install Package"
			]
		],
		"width": 539.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/kunwar/Documents/Sublime/Att",
		"/Users/kunwar/Documents/Sublime/Att/src",
		"/Users/kunwar/Documents/Sublime/Att/src/classes"
	],
	"file_history":
	[
		"/Users/kunwar/Documents/Sublime/Att/src/pages/Acknowledgement_Page.page",
		"/Users/kunwar/Documents/VF_Page",
		"/Users/kunwar/Documents/Sublime/w16box/src/classes/checkRecursive.cls",
		"/Users/kunwar/Documents/Sublime/w16box/src/pages/TerritorySection.page",
		"/Users/kunwar/Documents/Sublime/w16box/src/triggers/TargetName.trigger",
		"/Users/kunwar/Downloads/sampleApp/picklistsRUs/pages/ReusablePicklistEngine.page",
		"/Users/kunwar/Documents/Sublime/w16box/w16box.sublime-settings",
		"/Users/kunwar/Documents/Sublime/w16box/metadata/aura/basic/basic.cmp",
		"/Users/kunwar/Library/Application Support/Sublime Text 3/Packages/User/mavensmate.sublime-settings",
		"/Users/kunwar/Library/Application Support/Sublime Text 3/Packages/MavensMate/mavensmate.sublime-settings"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"fetchCaseIds",
			"resend",
			"socialCareHandler",
			"caseIdSet",
			"responseMessage",
			"One_Time_Used__c",
			"constructURLWithParameters",
			"FORSEE_LINK_USED",
			"sid=",
			"CheckcaseclosureReason",
			"Survey_Expired__c",
			"update",
			"SurveyDetailsflag",
			"SurveyDetails",
			"surveyGiven",
			"recursive"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 4,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/pages/SocialMediaPage.page",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1786,
						"regions":
						{
						},
						"selection":
						[
							[
								1762,
								1762
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/triggers/SocialForseeTrigger.trigger",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8095,
						"regions":
						{
						},
						"selection":
						[
							[
								2615,
								2615
							]
						],
						"settings":
						{
							"syntax": "Packages/MavensMate/sublime/lang/Apex.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 5.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/classes/SocialCareController.cls",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7537,
						"regions":
						{
						},
						"selection":
						[
							[
								1209,
								1209
							]
						],
						"settings":
						{
							"syntax": "Packages/MavensMate/sublime/lang/Apex.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/classes/SocialCareABSController.cls",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6641,
						"regions":
						{
						},
						"selection":
						[
							[
								5612,
								5628
							]
						],
						"settings":
						{
							"syntax": "Packages/MavensMate/sublime/lang/Apex.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 39.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/classes/SocialCareForseeHandler.cls",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18022,
						"regions":
						{
						},
						"selection":
						[
							[
								586,
								609
							]
						],
						"settings":
						{
							"syntax": "Packages/MavensMate/sublime/lang/Apex.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 927.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.MavensMate-OutputPanel":
	{
		"height": 100.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 100.0
	},
	"pinned_build_system": "",
	"project": "Att.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 199.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
